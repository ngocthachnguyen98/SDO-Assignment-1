version: 2.1

commands:
  install_deps:
    steps:
      - run:
          name: Install dependencies
          command: |
            cd src
            npm install

jobs:
  # CI build and run unit tests & linting
  build:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - install_deps

      - run:
          name: Run linting
          command: |
            cd src
            mkdir -p test-output
            npm run test-lint

      - run:
          name: Run unit tests
          command: |
            cd src
            npm run test-unit

      - run:
          name: Generate code coverage reports
          command: |
            cd src
            npm run test-coverage

      - run:
          name: Validate code coverage
          command: |
            bash <(curl -s https://codecov.io/bash)

      - store_test_results:
          path: ./src/test-output
      - store_artifacts:
          path: ./src/test-output
      - store_artifacts:
          path: ./src/coverage


  # Integration testing
  # Change port APP_PORT to 3000
  integration-tests:
    docker:
      - image: circleci/node:lts
      - image: circleci/postgres:12.2-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: circle_test
          # DB_USERNAME: username
          # DB_PASSWORD: password
          # DB_NAME: database
          # DB_HOSTNAME: host
    environment:
      APP_PORT: 4000
    steps:
      - checkout
      - install_deps

      - run:
          name: Run integration tests
          command: |
            cd src
            mkdir -p test-output
            npm run test-integration

      - store_test_results:
          path: ./src/test-output
      - store_artifacts:
          path: ./src/test-output


  # Packaging
  pack:
    docker:
      - image: circleci/node:lts
    environment:
      NODE_ENV: production
      IMAGE_NAME: sdo-a1/building-on-ci
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: Build Docker image
          command: docker build -t $IMAGE_NAME:latest ./src
      
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME

      - store_artifacts:
          path: ./image.tar

workflows:
  version: 2
  build-test-package:
    jobs:
      - build
      - integration-tests:
          requires:
            - build
      - pack:
          requires:
            - build
          filters:
            branches:
              only:
                - master
